
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  000005d2  00000666  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000005d2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000009  00800102  00800102  00000668  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000668  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000698  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000100  00000000  00000000  000006d8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000d83  00000000  00000000  000007d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000783  00000000  00000000  0000155b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000882  00000000  00000000  00001cde  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001d8  00000000  00000000  00002560  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000048d  00000000  00000000  00002738  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000004c4  00000000  00000000  00002bc5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000070  00000000  00000000  00003089  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	33 c0       	rjmp	.+102    	; 0x6a <__bad_interrupt>
   4:	32 c0       	rjmp	.+100    	; 0x6a <__bad_interrupt>
   6:	61 c1       	rjmp	.+706    	; 0x2ca <__vector_3>
   8:	30 c0       	rjmp	.+96     	; 0x6a <__bad_interrupt>
   a:	2f c0       	rjmp	.+94     	; 0x6a <__bad_interrupt>
   c:	2e c0       	rjmp	.+92     	; 0x6a <__bad_interrupt>
   e:	2e c0       	rjmp	.+92     	; 0x6c <__vector_7>
  10:	2c c0       	rjmp	.+88     	; 0x6a <__bad_interrupt>
  12:	2b c0       	rjmp	.+86     	; 0x6a <__bad_interrupt>
  14:	2a c0       	rjmp	.+84     	; 0x6a <__bad_interrupt>
  16:	29 c0       	rjmp	.+82     	; 0x6a <__bad_interrupt>
  18:	28 c0       	rjmp	.+80     	; 0x6a <__bad_interrupt>
  1a:	27 c0       	rjmp	.+78     	; 0x6a <__bad_interrupt>
  1c:	bd c0       	rjmp	.+378    	; 0x198 <__vector_14>
  1e:	e2 c0       	rjmp	.+452    	; 0x1e4 <__vector_15>
  20:	24 c0       	rjmp	.+72     	; 0x6a <__bad_interrupt>
  22:	23 c0       	rjmp	.+70     	; 0x6a <__bad_interrupt>
  24:	22 c0       	rjmp	.+68     	; 0x6a <__bad_interrupt>
  26:	21 c0       	rjmp	.+66     	; 0x6a <__bad_interrupt>
  28:	20 c0       	rjmp	.+64     	; 0x6a <__bad_interrupt>
  2a:	1f c0       	rjmp	.+62     	; 0x6a <__bad_interrupt>
  2c:	1e c0       	rjmp	.+60     	; 0x6a <__bad_interrupt>
  2e:	1d c0       	rjmp	.+58     	; 0x6a <__bad_interrupt>
  30:	1c c0       	rjmp	.+56     	; 0x6a <__bad_interrupt>
  32:	1b c0       	rjmp	.+54     	; 0x6a <__bad_interrupt>

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ef       	ldi	r28, 0xFF	; 255
  3a:	d2 e0       	ldi	r29, 0x02	; 2
  3c:	de bf       	out	0x3e, r29	; 62
  3e:	cd bf       	out	0x3d, r28	; 61

00000040 <__do_copy_data>:
  40:	11 e0       	ldi	r17, 0x01	; 1
  42:	a0 e0       	ldi	r26, 0x00	; 0
  44:	b1 e0       	ldi	r27, 0x01	; 1
  46:	e2 ed       	ldi	r30, 0xD2	; 210
  48:	f5 e0       	ldi	r31, 0x05	; 5
  4a:	02 c0       	rjmp	.+4      	; 0x50 <__do_copy_data+0x10>
  4c:	05 90       	lpm	r0, Z+
  4e:	0d 92       	st	X+, r0
  50:	a2 30       	cpi	r26, 0x02	; 2
  52:	b1 07       	cpc	r27, r17
  54:	d9 f7       	brne	.-10     	; 0x4c <__do_copy_data+0xc>

00000056 <__do_clear_bss>:
  56:	21 e0       	ldi	r18, 0x01	; 1
  58:	a2 e0       	ldi	r26, 0x02	; 2
  5a:	b1 e0       	ldi	r27, 0x01	; 1
  5c:	01 c0       	rjmp	.+2      	; 0x60 <.do_clear_bss_start>

0000005e <.do_clear_bss_loop>:
  5e:	1d 92       	st	X+, r1

00000060 <.do_clear_bss_start>:
  60:	ab 30       	cpi	r26, 0x0B	; 11
  62:	b2 07       	cpc	r27, r18
  64:	e1 f7       	brne	.-8      	; 0x5e <.do_clear_bss_loop>
  66:	59 d2       	rcall	.+1202   	; 0x51a <main>
  68:	b2 c2       	rjmp	.+1380   	; 0x5ce <_exit>

0000006a <__bad_interrupt>:
  6a:	ca cf       	rjmp	.-108    	; 0x0 <__vectors>

0000006c <__vector_7>:





ISR(TIMER2_COMPA_vect) {
  6c:	1f 92       	push	r1
  6e:	0f 92       	push	r0
  70:	0f b6       	in	r0, 0x3f	; 63
  72:	0f 92       	push	r0
  74:	11 24       	eor	r1, r1
  76:	8f 93       	push	r24
  78:	9f 93       	push	r25
	seconds++;
  7a:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <seconds>
  7e:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <seconds+0x1>
  82:	01 96       	adiw	r24, 0x01	; 1
  84:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <seconds+0x1>
  88:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <seconds>
	if (seconds == 60) {
  8c:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <seconds>
  90:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <seconds+0x1>
  94:	cc 97       	sbiw	r24, 0x3c	; 60
  96:	51 f5       	brne	.+84     	; 0xec <__vector_7+0x80>
		seconds = 0;
  98:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <seconds+0x1>
  9c:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <seconds>
		minutes++;
  a0:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <minutes>
  a4:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <minutes+0x1>
  a8:	01 96       	adiw	r24, 0x01	; 1
  aa:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <minutes+0x1>
  ae:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <minutes>
		if (minutes == 60) {
  b2:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <minutes>
  b6:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <minutes+0x1>
  ba:	cc 97       	sbiw	r24, 0x3c	; 60
  bc:	b9 f4       	brne	.+46     	; 0xec <__vector_7+0x80>
			minutes = 0;
  be:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <minutes+0x1>
  c2:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <minutes>
			hours++;
  c6:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <hours>
  ca:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <hours+0x1>
  ce:	01 96       	adiw	r24, 0x01	; 1
  d0:	90 93 0a 01 	sts	0x010A, r25	; 0x80010a <hours+0x1>
  d4:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <hours>
			if (hours == 24) {
  d8:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <hours>
  dc:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <hours+0x1>
  e0:	48 97       	sbiw	r24, 0x18	; 24
  e2:	21 f4       	brne	.+8      	; 0xec <__vector_7+0x80>
				hours = 0;
  e4:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <hours+0x1>
  e8:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <hours>
			}
		}
	}
	PORTD ^= (1 << PD7); // Toggle LED
  ec:	8b b1       	in	r24, 0x0b	; 11
  ee:	80 58       	subi	r24, 0x80	; 128
  f0:	8b b9       	out	0x0b, r24	; 11
}
  f2:	9f 91       	pop	r25
  f4:	8f 91       	pop	r24
  f6:	0f 90       	pop	r0
  f8:	0f be       	out	0x3f, r0	; 63
  fa:	0f 90       	pop	r0
  fc:	1f 90       	pop	r1
  fe:	18 95       	reti

00000100 <init_PWM>:




void init_PWM() {
	TIMSK0 |= (1 << OCIE0B) | (1 << OCIE0A);
 100:	ee e6       	ldi	r30, 0x6E	; 110
 102:	f0 e0       	ldi	r31, 0x00	; 0
 104:	80 81       	ld	r24, Z
 106:	86 60       	ori	r24, 0x06	; 6
 108:	80 83       	st	Z, r24
	TCCR0B  |= (1 << CS00) | (1 << WGM01);
 10a:	85 b5       	in	r24, 0x25	; 37
 10c:	83 60       	ori	r24, 0x03	; 3
 10e:	85 bd       	out	0x25, r24	; 37
	
	if (brightness > 10) {
 110:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 114:	8b 30       	cpi	r24, 0x0B	; 11
 116:	24 f0       	brlt	.+8      	; 0x120 <init_PWM+0x20>
		brightness = 10; // Begrenze die Helligkeit auf maximal 10
 118:	8a e0       	ldi	r24, 0x0A	; 10
 11a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 11e:	07 c0       	rjmp	.+14     	; 0x12e <init_PWM+0x2e>
		} else if (brightness < -3) {
 120:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 124:	8d 3f       	cpi	r24, 0xFD	; 253
 126:	1c f4       	brge	.+6      	; 0x12e <init_PWM+0x2e>
		brightness = 3; // Begrenze die Helligkeit auf minimal 0
 128:	83 e0       	ldi	r24, 0x03	; 3
 12a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
	}
	
	// Begrenze die Helligkeit auf den Bereich von -3 bis 3
	if (brightness > 3) {
 12e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 132:	84 30       	cpi	r24, 0x04	; 4
 134:	24 f0       	brlt	.+8      	; 0x13e <init_PWM+0x3e>
		brightness = 3;
 136:	83 e0       	ldi	r24, 0x03	; 3
 138:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 13c:	07 c0       	rjmp	.+14     	; 0x14c <init_PWM+0x4c>
		} else if (brightness < -3) {
 13e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 142:	8d 3f       	cpi	r24, 0xFD	; 253
 144:	1c f4       	brge	.+6      	; 0x14c <init_PWM+0x4c>
		brightness = 3;
 146:	83 e0       	ldi	r24, 0x03	; 3
 148:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
	}

	// Berechnung der PWM-Duty-Cycle-Werte basierend auf Helligkeitswert
	OCR0A = 126 + (50 * brightness); // Lineare Interpolation für OCR0A
 14c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 150:	92 e3       	ldi	r25, 0x32	; 50
 152:	89 9f       	mul	r24, r25
 154:	80 2d       	mov	r24, r0
 156:	11 24       	eor	r1, r1
 158:	82 58       	subi	r24, 0x82	; 130
 15a:	87 bd       	out	0x27, r24	; 39
	OCR0B = 126 - (50 * brightness); // OCR0B ist das Komplement von OCR0A
 15c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 160:	9e ec       	ldi	r25, 0xCE	; 206
 162:	89 9f       	mul	r24, r25
 164:	80 2d       	mov	r24, r0
 166:	11 24       	eor	r1, r1
 168:	82 58       	subi	r24, 0x82	; 130
 16a:	88 bd       	out	0x28, r24	; 40
 16c:	08 95       	ret

0000016e <enable_LEDs>:

}

void enable_LEDs() {
	
	PORTC = hours;
 16e:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <hours>
 172:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <hours+0x1>
 176:	88 b9       	out	0x08, r24	; 8
	
	if(sec_Mode){
 178:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 17c:	88 23       	and	r24, r24
 17e:	31 f0       	breq	.+12     	; 0x18c <enable_LEDs+0x1e>
		PORTD = seconds;
 180:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <seconds>
 184:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <seconds+0x1>
 188:	8b b9       	out	0x0b, r24	; 11
 18a:	08 95       	ret
	}
	else{
		PORTD= minutes;
 18c:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <minutes>
 190:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <minutes+0x1>
 194:	8b b9       	out	0x0b, r24	; 11
 196:	08 95       	ret

00000198 <__vector_14>:

void saveToEEPROM();
void loadFromEEPROM();


ISR(TIMER0_COMPA_vect) {
 198:	1f 92       	push	r1
 19a:	0f 92       	push	r0
 19c:	0f b6       	in	r0, 0x3f	; 63
 19e:	0f 92       	push	r0
 1a0:	11 24       	eor	r1, r1
 1a2:	2f 93       	push	r18
 1a4:	3f 93       	push	r19
 1a6:	4f 93       	push	r20
 1a8:	5f 93       	push	r21
 1aa:	6f 93       	push	r22
 1ac:	7f 93       	push	r23
 1ae:	8f 93       	push	r24
 1b0:	9f 93       	push	r25
 1b2:	af 93       	push	r26
 1b4:	bf 93       	push	r27
 1b6:	ef 93       	push	r30
 1b8:	ff 93       	push	r31
	enable_LEDs();
 1ba:	d9 df       	rcall	.-78     	; 0x16e <enable_LEDs>
}
 1bc:	ff 91       	pop	r31
 1be:	ef 91       	pop	r30
 1c0:	bf 91       	pop	r27
 1c2:	af 91       	pop	r26
 1c4:	9f 91       	pop	r25
 1c6:	8f 91       	pop	r24
 1c8:	7f 91       	pop	r23
 1ca:	6f 91       	pop	r22
 1cc:	5f 91       	pop	r21
 1ce:	4f 91       	pop	r20
 1d0:	3f 91       	pop	r19
 1d2:	2f 91       	pop	r18
 1d4:	0f 90       	pop	r0
 1d6:	0f be       	out	0x3f, r0	; 63
 1d8:	0f 90       	pop	r0
 1da:	1f 90       	pop	r1
 1dc:	18 95       	reti

000001de <disable_LEDs>:
	}
}


void disable_LEDs() {
	PORTD = 0;
 1de:	1b b8       	out	0x0b, r1	; 11
	PORTC = 0;
 1e0:	18 b8       	out	0x08, r1	; 8
 1e2:	08 95       	ret

000001e4 <__vector_15>:

ISR(TIMER0_COMPA_vect) {
	enable_LEDs();
}

ISR(TIMER0_COMPB_vect) {
 1e4:	1f 92       	push	r1
 1e6:	0f 92       	push	r0
 1e8:	0f b6       	in	r0, 0x3f	; 63
 1ea:	0f 92       	push	r0
 1ec:	11 24       	eor	r1, r1
 1ee:	2f 93       	push	r18
 1f0:	3f 93       	push	r19
 1f2:	4f 93       	push	r20
 1f4:	5f 93       	push	r21
 1f6:	6f 93       	push	r22
 1f8:	7f 93       	push	r23
 1fa:	8f 93       	push	r24
 1fc:	9f 93       	push	r25
 1fe:	af 93       	push	r26
 200:	bf 93       	push	r27
 202:	ef 93       	push	r30
 204:	ff 93       	push	r31
	disable_LEDs();
 206:	eb df       	rcall	.-42     	; 0x1de <disable_LEDs>
}
 208:	ff 91       	pop	r31
 20a:	ef 91       	pop	r30
 20c:	bf 91       	pop	r27
 20e:	af 91       	pop	r26
 210:	9f 91       	pop	r25
 212:	8f 91       	pop	r24
 214:	7f 91       	pop	r23
 216:	6f 91       	pop	r22
 218:	5f 91       	pop	r21
 21a:	4f 91       	pop	r20
 21c:	3f 91       	pop	r19
 21e:	2f 91       	pop	r18
 220:	0f 90       	pop	r0
 222:	0f be       	out	0x3f, r0	; 63
 224:	0f 90       	pop	r0
 226:	1f 90       	pop	r1
 228:	18 95       	reti

0000022a <initTimer>:
	PORTD = 0;
	PORTC = 0;
}

void initTimer() {
	ASSR |= (1 << AS2);
 22a:	e6 eb       	ldi	r30, 0xB6	; 182
 22c:	f0 e0       	ldi	r31, 0x00	; 0
 22e:	80 81       	ld	r24, Z
 230:	80 62       	ori	r24, 0x20	; 32
 232:	80 83       	st	Z, r24
	TCCR2A |= (1 << WGM21); // CTC mode
 234:	e0 eb       	ldi	r30, 0xB0	; 176
 236:	f0 e0       	ldi	r31, 0x00	; 0
 238:	80 81       	ld	r24, Z
 23a:	82 60       	ori	r24, 0x02	; 2
 23c:	80 83       	st	Z, r24
	TCCR2B |= (1 << CS22) | (1 << CS20); // Prescaler 128, start timer
 23e:	e1 eb       	ldi	r30, 0xB1	; 177
 240:	f0 e0       	ldi	r31, 0x00	; 0
 242:	80 81       	ld	r24, Z
 244:	85 60       	ori	r24, 0x05	; 5
 246:	80 83       	st	Z, r24
	OCR2A = 255; // Set compare value for ~1-second interrupt
 248:	8f ef       	ldi	r24, 0xFF	; 255
 24a:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__DATA_REGION_ORIGIN__+0x53>
	TIMSK2 |= (1 << OCIE2A); // Enable compare match interrupt
 24e:	e0 e7       	ldi	r30, 0x70	; 112
 250:	f0 e0       	ldi	r31, 0x00	; 0
 252:	80 81       	ld	r24, Z
 254:	82 60       	ori	r24, 0x02	; 2
 256:	80 83       	st	Z, r24
 258:	08 95       	ret

0000025a <initTaste>:
}


void initTaste(){
	// Initialisiere Taster
	DDRB &= ~((1 << PB0) | (1 << PB1) | (1 << PB2)); // Set PB0, PB1, and PB2 as inputs for buttons
 25a:	84 b1       	in	r24, 0x04	; 4
 25c:	88 7f       	andi	r24, 0xF8	; 248
 25e:	84 b9       	out	0x04, r24	; 4
	PORTB |= (1 << PB0) | (1 << PB1) | (1 << PB2); // Enable internal pull-up resistors for buttons
 260:	85 b1       	in	r24, 0x05	; 5
 262:	87 60       	ori	r24, 0x07	; 7
 264:	85 b9       	out	0x05, r24	; 5
	PCMSK0 |= (1 << PCINT0) | (1 << PCINT1) | (1 << PCINT2); // Aktiviere PCINT0, PCINT1 und PCINT2 für Pin Change Interrupt für PB0, PB1, PB2
 266:	eb e6       	ldi	r30, 0x6B	; 107
 268:	f0 e0       	ldi	r31, 0x00	; 0
 26a:	80 81       	ld	r24, Z
 26c:	87 60       	ori	r24, 0x07	; 7
 26e:	80 83       	st	Z, r24
	PCICR |= (1 << PCIE0); // Aktiviere PCIE0 für PCINT0, PCINT1 und PCINT2
 270:	e8 e6       	ldi	r30, 0x68	; 104
 272:	f0 e0       	ldi	r31, 0x00	; 0
 274:	80 81       	ld	r24, Z
 276:	81 60       	ori	r24, 0x01	; 1
 278:	80 83       	st	Z, r24
 27a:	08 95       	ret

0000027c <initLEDs>:
	
}
void initLEDs(){
	// Initialisiere Portrichtungen
	DDRD |= 0x3F; // Set PD0-PD5 as outputs for minutes
 27c:	8a b1       	in	r24, 0x0a	; 10
 27e:	8f 63       	ori	r24, 0x3F	; 63
 280:	8a b9       	out	0x0a, r24	; 10
	DDRC |= 0x1F; // Set PC0-PC4 as outputs for hours
 282:	87 b1       	in	r24, 0x07	; 7
 284:	8f 61       	ori	r24, 0x1F	; 31
 286:	87 b9       	out	0x07, r24	; 7
	PORTD &= 0x3F;
 288:	8b b1       	in	r24, 0x0b	; 11
 28a:	8f 73       	andi	r24, 0x3F	; 63
 28c:	8b b9       	out	0x0b, r24	; 11
	PORTC &= 0x1F;
 28e:	88 b1       	in	r24, 0x08	; 8
 290:	8f 71       	andi	r24, 0x1F	; 31
 292:	88 b9       	out	0x08, r24	; 8
	DDRD |= (1 << PD7); // Set PD7 as output for LED
 294:	57 9a       	sbi	0x0a, 7	; 10
	PORTD &= (1 << PD7);
 296:	8b b1       	in	r24, 0x0b	; 11
 298:	80 78       	andi	r24, 0x80	; 128
 29a:	8b b9       	out	0x0b, r24	; 11
 29c:	08 95       	ret

0000029e <saveToEEPROM>:
	
}

void saveToEEPROM() {
	eeprom_update_word((uint16_t*)EEPROM_SECONDS_ADDR, seconds);
 29e:	60 91 05 01 	lds	r22, 0x0105	; 0x800105 <seconds>
 2a2:	70 91 06 01 	lds	r23, 0x0106	; 0x800106 <seconds+0x1>
 2a6:	80 e0       	ldi	r24, 0x00	; 0
 2a8:	90 e0       	ldi	r25, 0x00	; 0
 2aa:	6c d1       	rcall	.+728    	; 0x584 <eeprom_update_word>
	eeprom_update_word((uint16_t*)EEPROM_MINUTES_ADDR, minutes);
 2ac:	60 91 07 01 	lds	r22, 0x0107	; 0x800107 <minutes>
 2b0:	70 91 08 01 	lds	r23, 0x0108	; 0x800108 <minutes+0x1>
 2b4:	82 e0       	ldi	r24, 0x02	; 2
 2b6:	90 e0       	ldi	r25, 0x00	; 0
 2b8:	65 d1       	rcall	.+714    	; 0x584 <eeprom_update_word>
	eeprom_update_word((uint16_t*)EEPROM_HOURS_ADDR, hours);
 2ba:	60 91 09 01 	lds	r22, 0x0109	; 0x800109 <hours>
 2be:	70 91 0a 01 	lds	r23, 0x010A	; 0x80010a <hours+0x1>
 2c2:	84 e0       	ldi	r24, 0x04	; 4
 2c4:	90 e0       	ldi	r25, 0x00	; 0
 2c6:	5e d1       	rcall	.+700    	; 0x584 <eeprom_update_word>
 2c8:	08 95       	ret

000002ca <__vector_3>:

ISR(TIMER0_COMPB_vect) {
	disable_LEDs();
}

ISR(PCINT0_vect) {
 2ca:	1f 92       	push	r1
 2cc:	0f 92       	push	r0
 2ce:	0f b6       	in	r0, 0x3f	; 63
 2d0:	0f 92       	push	r0
 2d2:	11 24       	eor	r1, r1
 2d4:	2f 93       	push	r18
 2d6:	3f 93       	push	r19
 2d8:	4f 93       	push	r20
 2da:	5f 93       	push	r21
 2dc:	6f 93       	push	r22
 2de:	7f 93       	push	r23
 2e0:	8f 93       	push	r24
 2e2:	9f 93       	push	r25
 2e4:	af 93       	push	r26
 2e6:	bf 93       	push	r27
 2e8:	ef 93       	push	r30
 2ea:	ff 93       	push	r31
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2ec:	87 ea       	ldi	r24, 0xA7	; 167
 2ee:	91 e6       	ldi	r25, 0x61	; 97
 2f0:	01 97       	sbiw	r24, 0x01	; 1
 2f2:	f1 f7       	brne	.-4      	; 0x2f0 <__vector_3+0x26>
 2f4:	00 c0       	rjmp	.+0      	; 0x2f6 <__vector_3+0x2c>
 2f6:	00 00       	nop
	_delay_ms(10);
	
	if ((PINB & 0b00000111) == 0b00000110 ||
 2f8:	83 b1       	in	r24, 0x03	; 3
 2fa:	87 70       	andi	r24, 0x07	; 7
 2fc:	86 30       	cpi	r24, 0x06	; 6
 2fe:	49 f0       	breq	.+18     	; 0x312 <__stack+0x13>
	(PINB & 0b00000111) == 0b00000101 ||
 300:	83 b1       	in	r24, 0x03	; 3
}

ISR(PCINT0_vect) {
	_delay_ms(10);
	
	if ((PINB & 0b00000111) == 0b00000110 ||
 302:	87 70       	andi	r24, 0x07	; 7
 304:	85 30       	cpi	r24, 0x05	; 5
 306:	29 f0       	breq	.+10     	; 0x312 <__stack+0x13>
	(PINB & 0b00000111) == 0b00000101 ||
	(PINB & 0b00000111) == 0b00000011){
 308:	83 b1       	in	r24, 0x03	; 3

ISR(PCINT0_vect) {
	_delay_ms(10);
	
	if ((PINB & 0b00000111) == 0b00000110 ||
	(PINB & 0b00000111) == 0b00000101 ||
 30a:	87 70       	andi	r24, 0x07	; 7
 30c:	83 30       	cpi	r24, 0x03	; 3
 30e:	09 f0       	breq	.+2      	; 0x312 <__stack+0x13>
 310:	45 c0       	rjmp	.+138    	; 0x39c <__stack+0x9d>
	(PINB & 0b00000111) == 0b00000011){
		// Gruppe 1: Tastenkombinationen, die in Gruppe 1 gehören
		// Führen Sie hier die Aktionen für Tastenkombinationen in Gruppe 1 aus
		if (!(PINB & (1 << PB0)) && !powerSaveMode && !powerDownMode) {
 312:	18 99       	sbic	0x03, 0	; 3
 314:	16 c0       	rjmp	.+44     	; 0x342 <__stack+0x43>
 316:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <powerSaveMode>
 31a:	81 11       	cpse	r24, r1
 31c:	12 c0       	rjmp	.+36     	; 0x342 <__stack+0x43>
 31e:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <powerDownMode>
 322:	81 11       	cpse	r24, r1
 324:	0e c0       	rjmp	.+28     	; 0x342 <__stack+0x43>
 326:	8f e4       	ldi	r24, 0x4F	; 79
 328:	93 ec       	ldi	r25, 0xC3	; 195
 32a:	01 97       	sbiw	r24, 0x01	; 1
 32c:	f1 f7       	brne	.-4      	; 0x32a <__stack+0x2b>
 32e:	00 c0       	rjmp	.+0      	; 0x330 <__stack+0x31>
 330:	00 00       	nop
			_delay_ms(20); // Debouncing
			while (!(PINB & (1 << PB0))); // Wait for button release
 332:	18 9b       	sbis	0x03, 0	; 3
 334:	fe cf       	rjmp	.-4      	; 0x332 <__stack+0x33>
			brightness = brightness - 3;
 336:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 33a:	83 50       	subi	r24, 0x03	; 3
 33c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
			init_PWM();
 340:	df de       	rcall	.-578    	; 0x100 <init_PWM>
		}

		if (!(PINB & (1 << PB1)) && !powerDownMode) {
 342:	19 99       	sbic	0x03, 1	; 3
 344:	13 c0       	rjmp	.+38     	; 0x36c <__stack+0x6d>
 346:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <powerDownMode>
 34a:	81 11       	cpse	r24, r1
 34c:	0f c0       	rjmp	.+30     	; 0x36c <__stack+0x6d>
 34e:	8f e4       	ldi	r24, 0x4F	; 79
 350:	93 ec       	ldi	r25, 0xC3	; 195
 352:	01 97       	sbiw	r24, 0x01	; 1
 354:	f1 f7       	brne	.-4      	; 0x352 <__stack+0x53>
 356:	00 c0       	rjmp	.+0      	; 0x358 <__stack+0x59>
 358:	00 00       	nop
			_delay_ms(20); // Debouncing
			while (!(PINB & (1 << PB1))); // Wait for button release
 35a:	19 9b       	sbis	0x03, 1	; 3
 35c:	fe cf       	rjmp	.-4      	; 0x35a <__stack+0x5b>
			powerSaveMode = !powerSaveMode;
 35e:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <powerSaveMode>
 362:	81 e0       	ldi	r24, 0x01	; 1
 364:	91 11       	cpse	r25, r1
 366:	80 e0       	ldi	r24, 0x00	; 0
 368:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <powerSaveMode>
		}

		if (!(PINB & (1 << PB2))) {
 36c:	1a 99       	sbic	0x03, 2	; 3
 36e:	68 c0       	rjmp	.+208    	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
 370:	8f e4       	ldi	r24, 0x4F	; 79
 372:	93 ec       	ldi	r25, 0xC3	; 195
 374:	01 97       	sbiw	r24, 0x01	; 1
 376:	f1 f7       	brne	.-4      	; 0x374 <__stack+0x75>
 378:	00 c0       	rjmp	.+0      	; 0x37a <__stack+0x7b>
 37a:	00 00       	nop
			_delay_ms(20); // Debouncing
			while (!(PINB & (1 << PB2))); // Wait for button release
 37c:	1a 9b       	sbis	0x03, 2	; 3
 37e:	fe cf       	rjmp	.-4      	; 0x37c <__stack+0x7d>
			powerDownMode = !powerDownMode;
 380:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <powerDownMode>
 384:	81 e0       	ldi	r24, 0x01	; 1
 386:	91 11       	cpse	r25, r1
 388:	80 e0       	ldi	r24, 0x00	; 0
 38a:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <powerDownMode>
			if (powerDownMode) {
 38e:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <powerDownMode>
 392:	88 23       	and	r24, r24
 394:	09 f4       	brne	.+2      	; 0x398 <__stack+0x99>
 396:	54 c0       	rjmp	.+168    	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
				saveToEEPROM();
 398:	82 df       	rcall	.-252    	; 0x29e <saveToEEPROM>
 39a:	52 c0       	rjmp	.+164    	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
		}
	}
	else {
		// Gruppe 2: Tastenkombinationen, die in Gruppe 2 gehören
		// Führen Sie hier die Aktionen für Tastenkombinationen in Gruppe 2 aus
		if (!(PINB & ((1 << PB0) | (1 << PB1)))) {
 39c:	83 b1       	in	r24, 0x03	; 3
 39e:	83 70       	andi	r24, 0x03	; 3
 3a0:	89 f4       	brne	.+34     	; 0x3c4 <__stack+0xc5>
 3a2:	8f e4       	ldi	r24, 0x4F	; 79
 3a4:	93 ec       	ldi	r25, 0xC3	; 195
 3a6:	01 97       	sbiw	r24, 0x01	; 1
 3a8:	f1 f7       	brne	.-4      	; 0x3a6 <__stack+0xa7>
 3aa:	00 c0       	rjmp	.+0      	; 0x3ac <__stack+0xad>
 3ac:	00 00       	nop
			_delay_ms(20); // Debouncing
			while (!(PINB & ((1 << PB0) | (1 << PB1)))); // Wait for button release
 3ae:	83 b1       	in	r24, 0x03	; 3
 3b0:	83 70       	andi	r24, 0x03	; 3
 3b2:	e9 f3       	breq	.-6      	; 0x3ae <__stack+0xaf>
			sec_Mode = !sec_Mode;
 3b4:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <__data_end>
 3b8:	81 e0       	ldi	r24, 0x01	; 1
 3ba:	91 11       	cpse	r25, r1
 3bc:	80 e0       	ldi	r24, 0x00	; 0
 3be:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
			init_PWM();
 3c2:	9e de       	rcall	.-708    	; 0x100 <init_PWM>
		}

		if (!(PINB & ((1 << PB1) | (1 << PB2)))) {
 3c4:	83 b1       	in	r24, 0x03	; 3
 3c6:	86 70       	andi	r24, 0x06	; 6
 3c8:	e1 f4       	brne	.+56     	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
 3ca:	8f e4       	ldi	r24, 0x4F	; 79
 3cc:	93 ec       	ldi	r25, 0xC3	; 195
 3ce:	01 97       	sbiw	r24, 0x01	; 1
 3d0:	f1 f7       	brne	.-4      	; 0x3ce <__stack+0xcf>
 3d2:	00 c0       	rjmp	.+0      	; 0x3d4 <__stack+0xd5>
 3d4:	00 00       	nop
			_delay_ms(20); // Debouncing
			while (!(PINB & ((1 << PB1) | (1 << PB2)))); // Wait for button release
 3d6:	83 b1       	in	r24, 0x03	; 3
 3d8:	86 70       	andi	r24, 0x06	; 6
 3da:	e9 f3       	breq	.-6      	; 0x3d6 <__stack+0xd7>
			++minutes;
 3dc:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <minutes>
 3e0:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <minutes+0x1>
 3e4:	01 96       	adiw	r24, 0x01	; 1
 3e6:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <minutes+0x1>
 3ea:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <minutes>
			if(minutes==60){
 3ee:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <minutes>
 3f2:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <minutes+0x1>
 3f6:	cc 97       	sbiw	r24, 0x3c	; 60
 3f8:	21 f4       	brne	.+8      	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
				minutes=0;
 3fa:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <minutes+0x1>
 3fe:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <minutes>
			}
			//init_PWM();
		}

		if (!(PINB & ((1 << PB0) | (1 << PB2)))) {
 402:	83 b1       	in	r24, 0x03	; 3
 404:	85 70       	andi	r24, 0x05	; 5
 406:	e1 f4       	brne	.+56     	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
 408:	8f e4       	ldi	r24, 0x4F	; 79
 40a:	93 ec       	ldi	r25, 0xC3	; 195
 40c:	01 97       	sbiw	r24, 0x01	; 1
 40e:	f1 f7       	brne	.-4      	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
 410:	00 c0       	rjmp	.+0      	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
 412:	00 00       	nop
			_delay_ms(20); // Debouncing
			while (!(PINB & ((1 << PB0) | (1 << PB2)))); // Wait for button release
 414:	83 b1       	in	r24, 0x03	; 3
 416:	85 70       	andi	r24, 0x05	; 5
 418:	e9 f3       	breq	.-6      	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
			++hours;
 41a:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <hours>
 41e:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <hours+0x1>
 422:	01 96       	adiw	r24, 0x01	; 1
 424:	90 93 0a 01 	sts	0x010A, r25	; 0x80010a <hours+0x1>
 428:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <hours>
			if(hours==24){
 42c:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <hours>
 430:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <hours+0x1>
 434:	48 97       	sbiw	r24, 0x18	; 24
 436:	21 f4       	brne	.+8      	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
				hours=0;
 438:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <hours+0x1>
 43c:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <hours>
			}
			//init_PWM();
		}
	}
}
 440:	ff 91       	pop	r31
 442:	ef 91       	pop	r30
 444:	bf 91       	pop	r27
 446:	af 91       	pop	r26
 448:	9f 91       	pop	r25
 44a:	8f 91       	pop	r24
 44c:	7f 91       	pop	r23
 44e:	6f 91       	pop	r22
 450:	5f 91       	pop	r21
 452:	4f 91       	pop	r20
 454:	3f 91       	pop	r19
 456:	2f 91       	pop	r18
 458:	0f 90       	pop	r0
 45a:	0f be       	out	0x3f, r0	; 63
 45c:	0f 90       	pop	r0
 45e:	1f 90       	pop	r1
 460:	18 95       	reti

00000462 <loadFromEEPROM>:
	eeprom_update_word((uint16_t*)EEPROM_HOURS_ADDR, hours);
	//	eeprom_update_byte((int8_t*)EEPROM_BRIGHTNESS_ADDR, brightness);
}


void loadFromEEPROM() {
 462:	cf 93       	push	r28
	seconds = eeprom_read_word((uint16_t*)EEPROM_SECONDS_ADDR) %60;
 464:	80 e0       	ldi	r24, 0x00	; 0
 466:	90 e0       	ldi	r25, 0x00	; 0
 468:	89 d0       	rcall	.+274    	; 0x57c <eeprom_read_word>
 46a:	ac 01       	movw	r20, r24
 46c:	9c 01       	movw	r18, r24
 46e:	a9 e8       	ldi	r26, 0x89	; 137
 470:	b8 e8       	ldi	r27, 0x88	; 136
 472:	78 d0       	rcall	.+240    	; 0x564 <__umulhisi3>
 474:	96 95       	lsr	r25
 476:	87 95       	ror	r24
 478:	92 95       	swap	r25
 47a:	82 95       	swap	r24
 47c:	8f 70       	andi	r24, 0x0F	; 15
 47e:	89 27       	eor	r24, r25
 480:	9f 70       	andi	r25, 0x0F	; 15
 482:	89 27       	eor	r24, r25
 484:	cc e3       	ldi	r28, 0x3C	; 60
 486:	c8 9f       	mul	r28, r24
 488:	90 01       	movw	r18, r0
 48a:	c9 9f       	mul	r28, r25
 48c:	30 0d       	add	r19, r0
 48e:	11 24       	eor	r1, r1
 490:	ca 01       	movw	r24, r20
 492:	82 1b       	sub	r24, r18
 494:	93 0b       	sbc	r25, r19
 496:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <seconds+0x1>
 49a:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <seconds>
	minutes = eeprom_read_word((uint16_t*)EEPROM_MINUTES_ADDR)%60;
 49e:	82 e0       	ldi	r24, 0x02	; 2
 4a0:	90 e0       	ldi	r25, 0x00	; 0
 4a2:	6c d0       	rcall	.+216    	; 0x57c <eeprom_read_word>
 4a4:	ac 01       	movw	r20, r24
 4a6:	9c 01       	movw	r18, r24
 4a8:	a9 e8       	ldi	r26, 0x89	; 137
 4aa:	b8 e8       	ldi	r27, 0x88	; 136
 4ac:	5b d0       	rcall	.+182    	; 0x564 <__umulhisi3>
 4ae:	96 95       	lsr	r25
 4b0:	87 95       	ror	r24
 4b2:	92 95       	swap	r25
 4b4:	82 95       	swap	r24
 4b6:	8f 70       	andi	r24, 0x0F	; 15
 4b8:	89 27       	eor	r24, r25
 4ba:	9f 70       	andi	r25, 0x0F	; 15
 4bc:	89 27       	eor	r24, r25
 4be:	c8 9f       	mul	r28, r24
 4c0:	90 01       	movw	r18, r0
 4c2:	c9 9f       	mul	r28, r25
 4c4:	30 0d       	add	r19, r0
 4c6:	11 24       	eor	r1, r1
 4c8:	ca 01       	movw	r24, r20
 4ca:	82 1b       	sub	r24, r18
 4cc:	93 0b       	sbc	r25, r19
 4ce:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <minutes+0x1>
 4d2:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <minutes>
	hours = eeprom_read_word((uint16_t*)EEPROM_HOURS_ADDR)%24;
 4d6:	84 e0       	ldi	r24, 0x04	; 4
 4d8:	90 e0       	ldi	r25, 0x00	; 0
 4da:	50 d0       	rcall	.+160    	; 0x57c <eeprom_read_word>
 4dc:	ac 01       	movw	r20, r24
 4de:	9c 01       	movw	r18, r24
 4e0:	ab ea       	ldi	r26, 0xAB	; 171
 4e2:	ba ea       	ldi	r27, 0xAA	; 170
 4e4:	3f d0       	rcall	.+126    	; 0x564 <__umulhisi3>
 4e6:	92 95       	swap	r25
 4e8:	82 95       	swap	r24
 4ea:	8f 70       	andi	r24, 0x0F	; 15
 4ec:	89 27       	eor	r24, r25
 4ee:	9f 70       	andi	r25, 0x0F	; 15
 4f0:	89 27       	eor	r24, r25
 4f2:	9c 01       	movw	r18, r24
 4f4:	22 0f       	add	r18, r18
 4f6:	33 1f       	adc	r19, r19
 4f8:	82 0f       	add	r24, r18
 4fa:	93 1f       	adc	r25, r19
 4fc:	88 0f       	add	r24, r24
 4fe:	99 1f       	adc	r25, r25
 500:	88 0f       	add	r24, r24
 502:	99 1f       	adc	r25, r25
 504:	88 0f       	add	r24, r24
 506:	99 1f       	adc	r25, r25
 508:	9a 01       	movw	r18, r20
 50a:	28 1b       	sub	r18, r24
 50c:	39 0b       	sbc	r19, r25
 50e:	30 93 0a 01 	sts	0x010A, r19	; 0x80010a <hours+0x1>
 512:	20 93 09 01 	sts	0x0109, r18	; 0x800109 <hours>
	//	brightness = eeprom_read_byte((int8_t*)EEPROM_BRIGHTNESS_ADDR);
}
 516:	cf 91       	pop	r28
 518:	08 95       	ret

0000051a <main>:
	PORTD ^= (1 << PD7); // Toggle LED
}

int main(void) {
	// Aktualisiere die Werte im EEPROM
	loadFromEEPROM();
 51a:	a3 df       	rcall	.-186    	; 0x462 <loadFromEEPROM>
	
	initLEDs();
 51c:	af de       	rcall	.-674    	; 0x27c <initLEDs>
	initTaste();
 51e:	9d de       	rcall	.-710    	; 0x25a <initTaste>
	
	init_PWM();
 520:	ef dd       	rcall	.-1058   	; 0x100 <init_PWM>
	
	initTimer();
 522:	83 de       	rcall	.-762    	; 0x22a <initTimer>
	
	sei(); // Enable global interrupts
 524:	78 94       	sei
	
	while (1) {
		if (powerDownMode) {
 526:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <powerDownMode>
 52a:	88 23       	and	r24, r24
 52c:	49 f0       	breq	.+18     	; 0x540 <main+0x26>
			set_sleep_mode(SLEEP_MODE_PWR_DOWN);
 52e:	83 b7       	in	r24, 0x33	; 51
 530:	81 7f       	andi	r24, 0xF1	; 241
 532:	84 60       	ori	r24, 0x04	; 4
 534:	83 bf       	out	0x33, r24	; 51
			sleep_enable();
 536:	83 b7       	in	r24, 0x33	; 51
 538:	81 60       	ori	r24, 0x01	; 1
 53a:	83 bf       	out	0x33, r24	; 51
			sleep_cpu(); // Enter Power-Down Mode
 53c:	88 95       	sleep
 53e:	f3 cf       	rjmp	.-26     	; 0x526 <main+0xc>
		}
		else if (powerSaveMode) {
 540:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <powerSaveMode>
 544:	88 23       	and	r24, r24
 546:	49 f0       	breq	.+18     	; 0x55a <main+0x40>
			set_sleep_mode(SLEEP_MODE_PWR_SAVE);
 548:	83 b7       	in	r24, 0x33	; 51
 54a:	81 7f       	andi	r24, 0xF1	; 241
 54c:	86 60       	ori	r24, 0x06	; 6
 54e:	83 bf       	out	0x33, r24	; 51
			sleep_enable();
 550:	83 b7       	in	r24, 0x33	; 51
 552:	81 60       	ori	r24, 0x01	; 1
 554:	83 bf       	out	0x33, r24	; 51
			sleep_cpu(); // Enter Power-Save Mode
 556:	88 95       	sleep
 558:	e6 cf       	rjmp	.-52     	; 0x526 <main+0xc>
		}
		else {
			sleep_disable();
 55a:	83 b7       	in	r24, 0x33	; 51
 55c:	8e 7f       	andi	r24, 0xFE	; 254
 55e:	83 bf       	out	0x33, r24	; 51
			init_PWM();
 560:	cf dd       	rcall	.-1122   	; 0x100 <init_PWM>
 562:	e1 cf       	rjmp	.-62     	; 0x526 <main+0xc>

00000564 <__umulhisi3>:
 564:	a2 9f       	mul	r26, r18
 566:	b0 01       	movw	r22, r0
 568:	b3 9f       	mul	r27, r19
 56a:	c0 01       	movw	r24, r0
 56c:	a3 9f       	mul	r26, r19
 56e:	01 d0       	rcall	.+2      	; 0x572 <__umulhisi3+0xe>
 570:	b2 9f       	mul	r27, r18
 572:	70 0d       	add	r23, r0
 574:	81 1d       	adc	r24, r1
 576:	11 24       	eor	r1, r1
 578:	91 1d       	adc	r25, r1
 57a:	08 95       	ret

0000057c <eeprom_read_word>:
 57c:	a8 e1       	ldi	r26, 0x18	; 24
 57e:	b0 e0       	ldi	r27, 0x00	; 0
 580:	42 e0       	ldi	r20, 0x02	; 2
 582:	06 c0       	rjmp	.+12     	; 0x590 <eeprom_read_blraw>

00000584 <eeprom_update_word>:
 584:	01 96       	adiw	r24, 0x01	; 1
 586:	27 2f       	mov	r18, r23
 588:	11 d0       	rcall	.+34     	; 0x5ac <eeprom_update_r18>
 58a:	0f c0       	rjmp	.+30     	; 0x5aa <eeprom_update_byte>

0000058c <eeprom_read_block>:
 58c:	dc 01       	movw	r26, r24
 58e:	86 2f       	mov	r24, r22

00000590 <eeprom_read_blraw>:
 590:	e8 2f       	mov	r30, r24
 592:	f9 99       	sbic	0x1f, 1	; 31
 594:	fe cf       	rjmp	.-4      	; 0x592 <eeprom_read_blraw+0x2>
 596:	12 bc       	out	0x22, r1	; 34
 598:	05 c0       	rjmp	.+10     	; 0x5a4 <eeprom_read_blraw+0x14>
 59a:	e1 bd       	out	0x21, r30	; 33
 59c:	f8 9a       	sbi	0x1f, 0	; 31
 59e:	e3 95       	inc	r30
 5a0:	00 b4       	in	r0, 0x20	; 32
 5a2:	0d 92       	st	X+, r0
 5a4:	41 50       	subi	r20, 0x01	; 1
 5a6:	c8 f7       	brcc	.-14     	; 0x59a <eeprom_read_blraw+0xa>
 5a8:	08 95       	ret

000005aa <eeprom_update_byte>:
 5aa:	26 2f       	mov	r18, r22

000005ac <eeprom_update_r18>:
 5ac:	f9 99       	sbic	0x1f, 1	; 31
 5ae:	fe cf       	rjmp	.-4      	; 0x5ac <eeprom_update_r18>
 5b0:	12 bc       	out	0x22, r1	; 34
 5b2:	81 bd       	out	0x21, r24	; 33
 5b4:	f8 9a       	sbi	0x1f, 0	; 31
 5b6:	81 50       	subi	r24, 0x01	; 1
 5b8:	00 b4       	in	r0, 0x20	; 32
 5ba:	02 16       	cp	r0, r18
 5bc:	39 f0       	breq	.+14     	; 0x5cc <eeprom_update_r18+0x20>
 5be:	1f ba       	out	0x1f, r1	; 31
 5c0:	20 bd       	out	0x20, r18	; 32
 5c2:	0f b6       	in	r0, 0x3f	; 63
 5c4:	f8 94       	cli
 5c6:	fa 9a       	sbi	0x1f, 2	; 31
 5c8:	f9 9a       	sbi	0x1f, 1	; 31
 5ca:	0f be       	out	0x3f, r0	; 63
 5cc:	08 95       	ret

000005ce <_exit>:
 5ce:	f8 94       	cli

000005d0 <__stop_program>:
 5d0:	ff cf       	rjmp	.-2      	; 0x5d0 <__stop_program>
